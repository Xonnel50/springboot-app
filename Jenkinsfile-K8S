pipeline {
    agent any
    
        tools {
        maven 'Maven_3_5_2'
    }

    environment {
        registry = "467290638204.dkr.ecr.us-west-2.amazonaws.com/my-python-repo"
        
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scmGit(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/Xonnel50/springboot-app.git']])
                
            }
        }
    
    	stage('SonarQube') {
            steps {
                sh "mvn sonar:sonar Dsonar.projectKey=Maverick Dsonar.host.url=http://54.90.201.131:9000 Dsonar.login=7f1a5a84a9192ef067a7c459e3c06c9583789fd7"
                
            }
        }
	
	stage('Run SCAnalysis Using Snyk') {
            steps {		
				withCredentials([string(credentialsId: 'SNYK_TOKEN', variable: 'SNYK_TOKEN')]) {
					sh 'mvn snyk:test -fn'
				}
			}
    }   

    	
        stage('Build Jar') {
            steps {
                sh "mvn clean install"
                
            }
        }
    
        stage ("Build image") {
            steps {
                withDockerRegistry([credentialsId: "docker", url: ""]) {
                script {
                app = docker.build("asg")
                }
            }
        }
        }
        
        stage ("docker push") {
         steps {
             script {
                 docker.withRegistry('https://467290638204.dkr.ecr.us-east-1.amazonaws.com', 'ecr:us-east-1:aws-credentials') {
                 app.push("latest")
    /*
                sh "aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 467290638204.dkr.ecr.us-east-1.amazonaws.com"
                sh "docker push 467290638204.dkr.ecr.us-east-1.amazonaws.com/my-python-repo:latest"
    */
             }
           }   
        }
        }
 /*
	timeout(time:1, unit:'DAYS') {
    	    input message:'Approve deployment?', submitter: 'Lennox'
}
*/	
        stage ("Kube Deploy") {
	    input
            {
                message "Do you want to proceed for deployment ?"
            }
            steps {
                withKubeConfig(caCertificate: '', clusterName: '', contextName: '', credentialsId: 'kubelogin', namespace: '', serverUrl: '') {
                 sh "kubectl apply -f eks-deploy-from-ecr.yaml"
                }
            }
        }
             

	stage ('wait_for_testing'){
	   steps {
		   sh 'pwd; sleep 180; echo "Application Has been deployed on K8S"'
	   	}
	   }
	   
	stage('RunDASTUsingZAP') {
          steps {
		    withKubeConfig([credentialsId: 'kubelogin']) {
				sh('zap.sh -cmd -quickurl http://$(kubectl get services/springboot-app -o json| jq -r ".status.loadBalancer.ingress[] | .hostname") -quickprogress -quickout ${WORKSPACE}/zap_report.html')
				archiveArtifacts artifacts: 'zap_report.html'
		    }
	     }
       } 
    }
}

